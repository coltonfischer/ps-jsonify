import PSM_JSON:EVALUATOR:Object;
import PSM_JSON:EVALUATOR:Class;

class Node extends JsonNode
   method Node(&paValue As any);
private
   instance any &maValue;
   method IsValue() Returns boolean;
end-class;


method Node
   /+ &paValue as Any +/
   
   %Super = CreateJsonNode();
   
   &maValue = &paValue;
   
   If %This.IsValue() Then
      
      Local JsonValue &jvJson = CreateJsonValue();
      
      try
         &jvJson.SetValue(&maValue);
      catch Exception &e /* JsonValue.SetValue(nbr) fails */
         &jvJson.SetNumber(&maValue);
      end-try;
      
      %This.SetJsonValue(&jvJson);
      Return;
      
   End-If;
   
   Local PSM_JSON:EVALUATOR:Object &oObjectEval = create PSM_JSON:EVALUATOR:Object(&maValue, %This);
   &oObjectEval.CreateNode();
   
end-method;


method IsValue
   /+ Returns Boolean +/
   
   try
      Return (&maValue = String(&maValue));
   catch Exception &e
   end-try;
   
   Return False;
   
end-method;