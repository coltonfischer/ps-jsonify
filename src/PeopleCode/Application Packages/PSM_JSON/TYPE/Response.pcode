import PSM_JSON:Object;
import PSM_JSON:Array;

class Response
   method Response(&poValue As Response, &pjnJson As JsonNode);
   method Process();
private
   method AddCookies();
   method AddHeaders();
   instance Response &moValue;
   instance PSM_JSON:Object &mjoJson;
end-class;

method Response
   /+ &poValue as Response, +/
   /+ &pjnJson as JsonNode +/
   
   &moValue = &poValue;
   
   If Not &pjnJson.IsJsonObject() Then
      &pjnJson.SetJsonObject(CreateJsonObject());
   End-If;
   
   &mjoJson = create PSM_JSON:Object();
   &mjoJson.FromJsonObject(&pjnJson.GetJsonObject());
   
end-method;


method Process
   
   &mjoJson.AddProperty("CharSet", &moValue.CharSet);
   /* @todo more properties */
   
   %This.AddCookies();
   %This.AddHeaders();
   
end-method;



method AddCookies
   
   Local PSM_JSON:Array &jaJson = create PSM_JSON:Array();
   
   Local array of string &asCookies = &moValue.GetCookieNames();
   
   Local integer &i;
   For &i = 1 To &asCookies.Len
      Local PSM_JSON:Object &joJson = create PSM_JSON:Object();
      &joJson.AddCookie(&asCookies [&i], &moValue.GetCookie(&asCookies [&i]));
      &jaJson.AddJsonObject(&joJson.ToJsonObject());
   End-For;
   
   &mjoJson.AddJsonArray("Cookies", &jaJson.ToJsonArray());
   
end-method;


method AddHeaders
   
   Local PSM_JSON:Array &jaJson = create PSM_JSON:Array();
   
   Local array of string &asHeaders = &moValue.GetHeaderNames();
   
   Local integer &i;
   For &i = 1 To &asHeaders.Len
      Local PSM_JSON:Object &joJson = create PSM_JSON:Object();
      &joJson.AddString(&asHeaders [&i], &moValue.GetHeader(&asHeaders [&i]));
      &jaJson.AddJsonObject(&joJson.ToJsonObject());
   End-For;
   
   &mjoJson.AddJsonArray("Headers", &jaJson.ToJsonArray());
   
end-method;