import PSM_JSON:*;
import PSM_JSON:TYPE:*;
import PSM_JSON:EVALUATOR:*;

class Array
   method Array();
   
   /* Generator Methods */
   method FromJsonArray(&pjaJsonArray As JsonArray);
   method FromJsonString(&psJson As string);
   
   /* Builder Methods */
   method AddArray(&paValue As array);
   method AddBoolean(&paValue As boolean);
   method AddClass(&paValue As object);
   method AddCookie(&paValue As Cookie);
   method AddDate(&paValue As date);
   method AddDateTime(&paValue As datetime);
   method AddElement(&paValue As any);
   method AddFloat(&paValue As float);
   method AddHash(&paValue As Hash);
   method AddInteger(&paValue As integer);
   method AddJsonArray(&paValue As JsonArray);
   method AddJsonNode(&paValue As JsonNode);
   method AddJsonObject(&paValue As JsonObject);
   method AddJsonValue(&paValue As JsonValue);
   method AddNull();
   method AddNumber(&paValue As number);
   method AddObject(&paValue As object);
   method AddRecord(&paValue As Record);
   method AddResponse(&paValue As Response);
   method AddRequest(&paValue As Request);
   method AddRow(&paValue As Row);
   method AddRowset(&paValue As Rowset);
   method AddString(&paValue As string);
   method AddTime(&paValue As time);
   method Pop();
   method Remove(&piIndex As integer);
   
   /* Parser Methods */
   method GetElement(&piIndex As integer) Returns any;
   method GetJsonNode(&piIndex As integer) Returns JsonNode; /* @todo docs */
   
   /* Converter Methods */
   method ToJsonArray() Returns JsonArray;
   method ToJsonString() Returns string;
   
   /* Informer Methods */
   method IsNull(&piIndex As integer) Returns boolean;
   property integer Length get;
   
private
   instance JsonArray &mjaJsonArray;
   instance PSM_JSON:Node &moJsonNode;
end-class;


method Array
   %This.FromJsonArray(CreateJsonArray());
end-method;


method FromJsonArray
   /+ &pjaJsonArray as JsonArray +/
   &mjaJsonArray = &pjaJsonArray;
end-method;


method FromJsonString
   /+ &psJson as String +/
   
   Local JsonParser &jpParser = CreateJsonParser();
   If Not &jpParser.Parse(&psJson) Then
      throw CreateException(0, 0, "Error Parsing JSON - Code: " | &jpParser.GetParseError());
   End-If;
   
   rem ? %This.FromJsonArray(&jpParser.GetRootNode().GetJsonArray());
   %This.FromJsonArray(&jpParser.GetRootObject().GetJsonArray(""));
   
end-method;


method AddArray
   /+ &paValue as Array of Any +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetArray(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddBoolean
   /+ &paValue as Boolean +/
   &mjaJsonArray.AddElement(&paValue);
end-method;


method AddClass
   /+ &paValue as Object +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetClass(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddCookie
   /+ &paValue as Cookie +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetCookie(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddDate
   /+ &paValue as Date +/
   &mjaJsonArray.AddElement(&paValue);
end-method;


method AddDateTime
   /+ &paValue as DateTime +/
   &mjaJsonArray.AddElement(&paValue);
end-method;


method AddElement
   /+ &paValue as Any +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetValue(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddFloat
   /+ &paValue as Float +/
   &mjaJsonArray.AddElement(&paValue);
end-method;


method AddHash
   /+ &paValue as Hash +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetHash(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddInteger
   /+ &paValue as Integer +/
   &mjaJsonArray.AddElement(&paValue);
end-method;


method AddJsonArray
   /+ &paValue as JsonArray +/
   &mjaJsonArray.AddJsonArrayElement("", &paValue);
end-method;


method AddJsonNode
   /+ &paValue as JsonNode +/
   
   If &paValue.IsJsonObject() Then
      %This.AddJsonObject(&paValue.GetJsonObject());
      Return;
   End-If;
   
   If &paValue.IsJsonArray() Then
      %This.AddJsonArray(&paValue.GetJsonArray());
      Return;
   End-If;
   
   If &paValue.IsJsonValue() Then
      %This.AddJsonValue(&paValue.GetJsonValue());
      Return;
   End-If;
   
   If &paValue.IsNull() Then
      %This.AddNull();
      Return;
   End-If;
   
end-method;


method AddJsonObject
   /+ &paValue as JsonObject +/
   &mjaJsonArray.AddJsonObjectElement("", &paValue);
end-method;


method AddJsonValue
   /+ &paValue as JsonValue +/
   
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetJsonValue(&paValue);
   
   If (&paValue.ValueType = 7) Then
      %This.AddNull();
      Return;
   End-If;
   
   &mjaJsonArray.AddElement(&paValue.GetValue());
   
end-method;


method AddNull
   &mjaJsonArray.AddNullElement();
end-method;


method AddNumber
   /+ &paValue as Number +/
   &mjaJsonArray.AddElement(&paValue);
end-method;


method AddObject
   /+ &paValue as Object +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetObject(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddRecord
   /+ &paValue as Record +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetRecord(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddResponse
   /+ &paValue as Response +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetResponse(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddRequest
   /+ &paValue as Request +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetRequest(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddRow
   /+ &paValue as Row +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetRow(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddRowset
   /+ &paValue as Rowset +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetRowset(&paValue);
   %This.AddJsonNode(&moJsonNode);
end-method;


method AddString
   /+ &paValue as String +/
   &moJsonNode = create PSM_JSON:Node();
   &moJsonNode.SetString(&paValue);
   &mjaJsonArray.AddElement(&moJsonNode.GetString());
end-method;


method AddTime
   /+ &paValue as Time +/
   &mjaJsonArray.AddElement(&paValue);
end-method;


method GetElement
   /+ &piIndex as Integer +/
   /+ Returns Any +/
   Return &mjaJsonArray.GetElement(&piIndex);
end-method;


method GetJsonNode
   /+ &piIndex as Integer +/
   /+ Returns JsonNode +/
   Local PSM_JSON:Node &oNode = create PSM_JSON:Node();
   &oNode.SetValue(&mjaJsonArray.GetElement(&piIndex));
   Return &oNode;
end-method;


method Pop
   &mjaJsonArray.Pop();
end-method;


method Remove
   /+ &piIndex as Integer +/
   &mjaJsonArray.Remove(&piIndex);
end-method;


method ToJsonString
   /+ Returns String +/
   Return &mjaJsonArray.ToString();
end-method;


method ToJsonArray
   /+ Returns JsonArray +/
   Return &mjaJsonArray;
end-method;


method IsNull
   /+ &piIndex as Integer +/
   /+ Returns Boolean +/
   rem Return &mjaJsonArray.IsNull(&piIndex); /* Not working in 8.56.12 */
   Return (&mjaJsonArray.GetType(&piIndex) = 7);
end-method;


get Length
   /+ Returns Integer +/
   Return &mjaJsonArray.Length();
end-get;